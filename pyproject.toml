[build-system]
build-backend = "hatchling.build"

requires = [ "hatchling" ]

[project]
name = "django-otp-webauthn"
description = "FIDO2 WebAuthn support for django-otp: lets your users authenticate with Passkeys"
readme = "README.md"
keywords = [ "authentication", "django", "django-otp", "fido2", "mfa", "security", "u2f", "webauthn" ]
license = "BSD-3-Clause"
authors = [ { name = "Storm B. Heg", email = "storm@stormbase.digital" } ]
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Web Environment",
  "Framework :: Django",
  "Framework :: Django :: 4.2",
  "Framework :: Django :: 5.1",
  "Framework :: Django :: 5.2",
  "Framework :: Django :: 6.0",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.14",
  "Topic :: Communications :: FIDO",
  "Topic :: Security",
]
dynamic = [ "version" ]
dependencies = [
  "django>=4.2",
  "django-otp>=1.4,<2",
  "djangorestframework>=3.14",
  "webauthn>=2.6,<3",
]

optional-dependencies.docs = [
  "furo==2024.8.6",
  "pyspelling==2.10",
  "sphinx==8.0.2",
  "sphinx-autobuild==2024.10.3",
  "sphinx-copybutton==0.5.2",
  "sphinx-design==0.6.1",
]
optional-dependencies.playwright = [
  "playwright>=1.49,<2",
  "pytest-playwright>=0.5.2,<1",
]
optional-dependencies.testing = [
  "beautifulsoup4>=4,<5",
  "coverage[toml]>=7,<8",
  "dj-database-url>=3,<4",
  # To test functionality with a strict Content Security Policy
  "django-csp>=4,<5",
  "django-debug-toolbar>=6,<7",
  "jsonschema~=4.23",
  # Update as necessary, prevent sudden breakage
  "pytest>8,<9",
  "pytest-django>4.5,<5",
  "pytest-env>=1,<2",
  "pytest-factoryboy>=2,<3",
  "pytest-mock>=3.14,<4",
  "pytest-randomly>=4,<5",
  "pytest-rerunfailures>=16,<17",
]
urls.Changelog = "https://github.com/Stormbase/django-otp-webauthn/blob/main/CHANGELOG.md"
urls.Documentation = "https://django-otp-webauthn.readthedocs.io/en/latest/"
urls.Issues = "https://github.com/Stormbase/django-otp-webauthn/issues"
urls.Source = "https://github.com/Stormbase/django-otp-webauthn"

[tool.hatch.version]
path = "src/django_otp_webauthn/__init__.py"

[tool.hatch.build.targets.wheel]
artifacts = [
  # Include built static files that are gitignored and thus not included by default
  "src/django_otp_webauthn/static/django_otp_webauthn/*",
  # Include compiled translations that are gitignored and thus not included by default
  "src/django_otp_webauthn/locale/*/LC_MESSAGES/*.mo",
]

[tool.hatch.build.targets.sdist]
artifacts = [
  # Include built static files that are gitignored and thus not included by default
  "src/django_otp_webauthn/static/django_otp_webauthn/*",
  # Include compiled translations that are gitignored and thus not included by default
  "src/django_otp_webauthn/locale/*/LC_MESSAGES/*.mo",
  "sandbox/locale/*/LC_MESSAGES/*.mo",
]
# Manually specify what to include, otherwise it becomes a mess
include = [
  "src/django_otp_webauthn",
  "sandbox/",
  "client/",
  "tests/",
  "scripts/",
  "README.md",
  "LICENSE",
  "CHANGELOG.md",
  "CONTRIBUTORS.md",
  "SECURITY.md",
  "pyproject.toml",
]

[tool.hatch.envs.default]
dependencies = [
  "django-otp-webauthn[testing,docs]",
]

[tool.hatch.envs.hatch-static-analysis]
# Do not use Hatch default configuration
config-path = "pyproject.toml"
dependencies = [  ]

[tool.ruff]
target-version = "py39" # minimum target version

lint.select = [
  "B",      # flake8-bugbear
  "BLE",    # flake8-blind-except
  "C4",     # flake8-comprehensions
  "DJ",     # flake8-django
  "E",      # pycodestyle errors
  "F",      # pyflakes
  "I",      # isort
  "INT",    # flake8-gettext
  "PGH",    # pygrep-hooks
  "PIE",    # flake8-pie
  "RUF100", # unused noqa
  "S",      # flake8-bandit
  "SIM",    # flake8-simplify
  "T20",    # flake8-print
  "UP",     # pyupgrade
  "W",      # pycodestyle warnings
  "YTT",    # flake8-2020
]
lint.extend-ignore = [
  "E501",   # no line length errors
  "SIM105", # https://docs.astral.sh/ruff/rules/suppressible-exception/
]
lint.per-file-ignores."sandbox/settings/*" = [
  "F405", # https://docs.astral.sh/ruff/rules/undefined-local-with-import-star-usage/
]
lint.per-file-ignores."tests/*" = [
  "S101",   # Bandit: Use of `assert` okay in tests
  "SIM117", # flake8-simply: Using multiple nested `with` statements is often clearer in the context of tests
]
lint.fixable = [ "C4", "E", "F", "I", "UP" ]
lint.isort.known-first-party = [ "django_otp_webauthn", "sandbox", "tests" ]

[tool.pytest.ini_options]
pythonpath = "sandbox"
DJANGO_SETTINGS_MODULE = "settings"
testpaths = "tests/"
norecursedirs = [ "tests/e2e" ]
addopts = "--reuse-db"

[tool.coverage.run]
source_pkgs = [ "django_otp_webauthn" ]
branch = true
omit = [ "*/migrations/*", "*/tests/*" ]

[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",

  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self.debug",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:",

  # Don't complain about abstract methods, they aren't run:
  "@(abc.)?abstractmethod",

  # Nor complain about type checking
  "if TYPE_CHECKING:",
]
